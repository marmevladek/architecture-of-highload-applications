version: '3.8'

services:

  profile-service:
    build:
      context: ./profile-service
      dockerfile: Dockerfile
    image: ghcr.io/marmevladek/architecture-of-highload-applications/profile-service:latest
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 256M
    ports:
      - "1000:1000"
    env_file:
      - ./profile-service/.env
    environment:
      SPRING_REDIS_HOST: redis
    depends_on:
      - postgres-master-profile
      - redis
#      - logstash

  swipe-service:
    build:
      context: ./swipe-service
      dockerfile: Dockerfile
    image: ghcr.io/marmevladek/architecture-of-highload-applications/swipe-service:latest
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 1024M
    expose:
      - "1001"
    env_file:
      - ./swipe-service/.env
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin
    depends_on:
      - postgres-master-swipe
#      - logstash

  deck-service:
    build:
      context: ./deck-service
      dockerfile: Dockerfile
    image: ghcr.io/marmevladek/architecture-of-highload-applications/deck-service:latest
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    ports:
      - "1002:1002"
    env_file:
      - ./deck-service/.env
    depends_on:
      - profile-service
#      - logstash

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    image: ghcr.io/marmevladek/architecture-of-highload-applications/notification-service:latest
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
    ports:
      - "1003:1003"
    env_file:
      - ./notification-service/.env
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      - rabbitmq
      - swipe-service
#      - logstash

  postgres-master-profile:
    image: bitnami/postgresql:latest
    container_name: postgres-master-profile
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD=replica_pass
      - POSTGRESQL_DATABASE=profiles_db
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
    ports:
      - "4001:5432"
    volumes:
      - postgres_master_profile_data:/bitnami/postgresql
      - ./initdb-profile:/docker-entrypoint-initdb.d

  postgres-master-swipe:
    image: bitnami/postgresql:latest
    container_name: postgres-master-swipe
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD=replica_pass
      - POSTGRESQL_DATABASE=swipes_db
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
    ports:
      - "4002:5432"
    volumes:
      - postgres_master_swipes_data:/bitnami/postgresql
      - ./initdb-swipe:/docker-entrypoint-initdb.d

  postgres-replica-profile:
    image: bitnami/postgresql:latest
    container_name: postgres-replica-profile
    depends_on:
      - postgres-master-profile
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD=replica_pass
      - POSTGRESQL_MASTER_HOST=postgres-master-profile
      - POSTGRESQL_MASTER_PORT=5432
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
    ports:
      - "4003:5432"
    volumes:
      - postgres_replica_profile_data:/bitnami/postgresql

  postgres-replica-swipe:
    image: bitnami/postgresql:latest
    container_name: postgres-replica-swipe
    depends_on:
      - postgres-master-swipe
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD=replica_pass
      - POSTGRESQL_MASTER_HOST=postgres-master-swipe
      - POSTGRESQL_MASTER_PORT=5432
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
    ports:
      - "4004:5432"
    volumes:
      - postgres_replica_swipes_data:/bitnami/postgresql

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - swipe-service

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin

#  elasticsearch:
#    image: elasticsearch:7.16.1
#    volumes:
#      - ./infrastructure-services/elasticsearch/config.yaml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
#      - ./docker-volumes/elasticsearch/data:/usr/share/elasticsearch/data
#    environment:
#      ES_JAVA_OPTS: "-Xmx512m -Xms512m"
#      ELASTIC_USERNAME: "elastic"
#      ELASTIC_PASSWORD: "MyPw123"
#      discovery.type: single-node
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#
#  logstash:
#    image: logstash:7.16.1
#    volumes:
#      - ./infrastructure-services/logstash/config.yaml:/usr/share/logstash/config/logstash.yml:ro
#      - ./infrastructure-services/logstash/pipelines.yaml:/usr/share/logstash/config/pipelines.yml:ro
#      - ./infrastructure-services/logstash/pipelines:/usr/share/logstash/config/pipelines:ro
#    environment:
#      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
#    ports:
#      - "5044:5044"
#      #      - "5000:5000"
#      - "9600:9600"
#    depends_on:
#      - elasticsearch
#
#  kibana:
#    image: kibana:7.16.1
#    depends_on:
#      - elasticsearch
#    volumes:
#      - ./infrastructure-services/kibana/config.yaml:/usr/share/kibana/config/kibana.yml:ro
#    ports:
#      - "5601:5601"

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure-services/grafana/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure-services/grafana/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"


  alert-manager:
    image: prom/alertmanager:v0.27.0
    volumes:
      - ./infrastructure-services/alert-manager/alert-manager.yml:/etc/alertmanager/alertmanager.yml:ro
    ports:
      - "9093:9093"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.3
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/devopsl-db?sslmode=disable"
    ports:
      - "9187:9187"

  tsung:
    container_name: tsung
    build:
      context: infrastructure-services/tsung
      dockerfile: Dockerfile
    image: ghcr.io/marmevladek/architecture-of-highload-applications/tsung:latest
    ports:
      - ${TSUNG_OUTER_PORT:-8091}:${TSUNG_INNER_PORT:-8091}
    volumes:
      - ./infrastructure-services/tsung/:/tsung/config
      - ./infrastructure-services/tsung/log:/root/.tsung/log
    entrypoint: [ "sleep", "infinity" ]

volumes:
  postgres_master_profile_data:
  postgres_master_swipes_data:
  postgres_replica_profile_data:
  postgres_replica_swipes_data:
  redis-data:
  rabbitmq-data:
  grafana-data: